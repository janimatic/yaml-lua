--[[
file: runme.lua
This file illustrates yaml-cpp C++ library lua interface generated by SWIG, 
using an helper class : yaml_lua.h

* References
https://www.swig.org/Doc1.3/SWIG.html
https://www.swig.org/Doc1.3/SWIGPlus.html
https://github.com/michaelbaisch/ofxYAML/blob/master/src/ofxYAML.h
]]--

---- importing ----
if string.sub(_VERSION,1,7)=='Lua 5.0' then
	-- lua5.0 doesn't have a nice way to do this
	lib=loadlib('yaml_lua.dll','luaopen_example') or loadlib('yaml_lua.so','luaopen_example')
	assert(lib)()
else
	-- lua 5.1 does
	require('yaml_lua')
end

yaml = yaml_lua.yaml()


local function testCase(test)
    if test == 0 then
        print("----------------------------------------------")
        print("handling simple files: ")
        config = yaml:load("config.yaml")
        configMap = yaml:asMap(config)
        print ("--- config: ")
        print ("pid: " .. configMap["pid"])
        print ("wait: " .. configMap["wait"])
        print ("port: " .. configMap["port"])
        print ("timeout: " .. configMap["timeout"])
        print ("servers: " .. configMap["servers"])
        print ("require: " .. configMap["require"])
        print ("dbg-mode: " .. configMap["dbg-mode"])
        print("\n\n")

    elseif test == 1 then
        print("----------------------------------------------")
        print("-- handling files containing multiple documents: ")
        print ("--- cooke-lens 0: ")
        cookeLens = yaml:load("cooke-lens.yaml")
        cookeLensMap = yaml:asMap(cookeLens)
        print ("RecordType: " .. cookeLensMap["RecordType"])

        print ("--- cooke-lens 1: ")
        cookeLens = yaml:load("cooke-lens.yaml", 1)
        cookeLensMap = yaml:asMap(cookeLens)
        print ("RecordType: " .. cookeLensMap["RecordType"])
        print("\n\n")
        
    elseif test == 2 then
        print("----------------------------------------------")
        print("-- looping through multiple documents in a file: ")
        for i = 0, yaml:getNumberOfDocuments("cooke-lens.yaml") - 1 do
            cookeLens = yaml:load("cooke-lens.yaml", i)
            cookeLensMap = yaml:asMap(cookeLens)
            print ("RecordType "  .. tostring(i) .. " : " .. cookeLensMap["RecordType"])
        end
        print("\n\n")
        
    elseif test == 3 then
        print("----------------------------------------------")
        print("-- dumping file content: ")
        yaml:dumpFile("cooke-lens.yaml")
        
    end
    
end

testCase(0)
testCase(1)
testCase(2)
testCase(3)

-- cleanup
yaml=nil
collectgarbage()
print "Goodbye yaml!"
